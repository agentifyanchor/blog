
[{"content":"","date":"5 January 2025","externalUrl":null,"permalink":"/","section":"Agentify Anchor","summary":"","title":"Agentify Anchor","type":"page"},{"content":"In today\u0026rsquo;s world, Python is used for many purposes in large projects, especially in AI, LLM, and RAG. However, maintaining a healthy environment, managing compatibility, and handling packaging can be challenging tasks.\nFor this reason, using containers not only for deploying Python apps but also as a development environment could be a suitable approach.\nIn this post, I will show you how simple it is to start developing Python projects without needing to install Python and manage multiple versions, create virtual environments, set environment variables, and handle other prerequisites.\nWe can achieve this directly from VSCode using just one extension.\nPresenting the Extension # Youâ€™ve probably encountered the .devcontainer folder and the devcontainer.json file in other projects. But what do they do?\nThe .devcontainer folder and its JSON file are used to define a containerized development environment. This setup ensures that all developers on a project have a consistent development environment, regardless of their local machine configurations. The .devcontainer configuration can specify the base image, extensions, and settings needed for the project.\nWeâ€™re going to make this easy by generating the configuration files automaticallyâ€”no need to craft them manually from scratch!ðŸ˜‰\nSo let\u0026rsquo;s start\u0026hellip;\nPrerequisites # Before we dive in, make sure you have Docker and VSCode installed.\nStep 1: Installing the Extension # First, install the necessary extension in VSCode. You can do this by visiting the Dev Container extension page or by searching for it directly in the extension manager in Visual Studio Code. You can use the Ctrl+Shift+X Shortcut.\nStep 2: Generate the Devcontainer Folder # After installing the extension, you should find an icon at the bottom left side of your IDE. Click on it and follow the wizard steps to generate the .devcontainer folder and configuration files.\nSelect Add Dev Container Configuration Files.\nSelect Add Configuration to Workspace. This will add the .devcontainer folder and the related configuration under your current work directory.\nYou can choose from a variety of preset configurations. In our case, we will choose Python 3.\nIn the next step, we can choose a desired version of Python. You can choose any version you are comfortable with.\nIn the next step, we can choose some features. We will select uv, a great package and project manager, which we will use further in this post.\nWe can select additional configuration for the features, so we will select the shell autocompletion option.\nYou can skip the next step if you don\u0026rsquo;t want to use the Dependabot functionality. Dependabot helps you keep your dependencies up to date by automatically checking for updates and creating pull requests. After running the wizard, youâ€™ll end up with the following root project structure.\nOnce the .devcontainer folder is set up, thereâ€™s no need to build an image manuallyâ€”the extension will handle that for you! Youâ€™re now ready to connect to the containerized environment and start using it as your development environment. Weâ€™ll explore this process in Part 2 of this post, so stay tuned!\nFinal Thoughts # Congratulations on setting up your containerized Python development environment with VSCode and Docker! By using Deb Container extension, you\u0026rsquo;ve made your development setup consistent and portable. Now you can focus on your projects without worrying about managing environments and dependencies. Happy coding, and see you in the next part!\n","date":"5 January 2025","externalUrl":null,"permalink":"/posts/2025-01-05-optimize-python-development-with-docker/","section":"Posts","summary":"","title":"Optimize Python Development with VsCode and Docker","type":"posts"},{"content":" Optimize Python Development with VSCode and Docker # In todayâ€™s world, Python is the go-to language for a variety of projects, from Artificial Intelligence (AI) to Large Language Models (LLM) and Retrieval-Augmented Generation (RAG). But letâ€™s face itâ€”managing Python environments, dealing with compatibility issues, and juggling virtual environments can be a real headache.\nThatâ€™s where containers come in handy. Theyâ€™re not just for deploying Python apps; theyâ€™re a fantastic solution for creating a smooth, consistent development environment. No more installing Python versions, setting up virtual environments, or dealing with environment variables manually.\nWith Docker and VSCode, you can do all this effortlessly. And the best part? Weâ€™ll use just one extension to get everything set up.\nPresenting the VSCode Extension # Youâ€™ve probably encountered the .devcontainer folder and the devcontainer.json file in other projects. But what do they do?\nThe .devcontainer folder and its configuration file define a containerized development environment. This ensures that every developer on the project has the same environment, regardless of their local setup. Inside the .devcontainer configuration, you can specify the base image, extensions, and other settings your project needs.\nWeâ€™re going to make this easy by generating the configuration files automaticallyâ€”no need to craft them manually from scratch!\nPrerequisites # Before we dive in, make sure you have Docker and VSCode installed. These are the tools weâ€™ll be using for this tutorial.\nStep 1: Installing the Extension # First, letâ€™s get the necessary VSCode extension: the Dev Containers extension.\nInstall it from the VSCode marketplace. Once installed, you should see an icon in the bottom left corner of your VSCode window. Click on it and let the wizard guide you through the process of setting up the .devcontainer folder and all the required configuration files.\nStep 2: Generating the DevContainer Folder # After installing the extension, youâ€™ll find an icon in the bottom left corner of VSCode. Click on it and follow the wizard to generate the .devcontainer folder and configuration files.\nChoose the option Add Dev Container Configuration Files.\nNext, choose Add Configuration to Workspace. This will add the .devcontainer folder with the related configuration files directly to your current project directory.\nNow, youâ€™ll have the option to choose from a list of preset configurations. Since weâ€™re focusing on Python, select Python 3.\nYouâ€™ll be prompted to choose the Python version for your container. Pick any version youâ€™re comfortable with (weâ€™ll go with Python 3.x).\nIn the next step, you can add extra features. For this post, letâ€™s add uv, a project manager and package manager that weâ€™ll use in our development setup.\nWe can also enable additional features like shell autocompletion for even better usability.\nSkip the Dependabot step unless you want to keep your dependencies automatically up to date. It\u0026rsquo;s a handy feature but not strictly necessary for now.\nDependabot helps you automatically update your project dependencies by checking for updates and creating pull requests. Step 3: Running the DevContainer # Once the .devcontainer folder is set up, there\u0026rsquo;s no need to build an image manuallyâ€”the extension will handle that for you! Now, youâ€™re ready to connect to the containerized environment and start using it as your development environment.\nLet\u0026rsquo;s Create Some Projects # Now that we have our DevContainer set up, letâ€™s dive into creating a couple of simple projects. For simplicity, weâ€™ll create two basic appsâ€”Project1 and Project2â€”that just display a simple message.\nIn VSCode, you can create these projects within your containerized environment:\nHereâ€™s how the code for Project1 and Project2 might look:\nProject1 Display: \u0026ldquo;Welcome to Project 1\u0026rdquo; Project2 Display: \u0026ldquo;Welcome to Project 2\u0026rdquo; Itâ€™s that easy! You can now work on multiple projects, all within the same containerized environment.\nFinal Thoughts # Congratulations! Youâ€™ve just set up a fully containerized Python development environment using VSCode and Docker. The .devcontainer folder and its configuration files make it easy to replicate this environment on other machines or share it with teammates. Now, you can focus on building Python applications without worrying about managing dependencies or configurations.\nReady to take your development to the next level? Stay tuned for future posts where weâ€™ll dive deeper into containerized Python development!\n","date":"5 January 2025","externalUrl":null,"permalink":"/posts/2025-01-05-a-demo-file/","section":"Posts","summary":"","title":"Optimize Python Development with VSCode and Docker","type":"posts"},{"content":"","date":"5 January 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"Hello\nDon\u0026rsquo;t forget to follow me on Twitter. ","date":"5 January 2025","externalUrl":null,"permalink":"/posts/discover-journey/","section":"Posts","summary":"","title":"Discover My Journey: About Me","type":"posts"},{"content":"","date":"5 January 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"5 January 2025","externalUrl":null,"permalink":"/tags/test/","section":"Tags","summary":"","title":"Test","type":"tags"},{"content":"","date":"5 January 2025","externalUrl":null,"permalink":"/tags/test2/","section":"Tags","summary":"","title":"Test2","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]