
[{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/","section":"Agentify Anchor","summary":"","title":"Agentify Anchor","type":"page"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/posts/2025-01-08-run-mysql-in-a-docker-container-a-beginners-guide/","section":"Posts","summary":"","title":"Run MySQL in a Docker Container: A Beginner's Guide","type":"posts"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/tags/devcontainer/","section":"Tags","summary":"","title":"DevContainer","type":"tags"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/tags/devops/","section":"Tags","summary":"","title":"DevOps","type":"tags"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/tags/podman/","section":"Tags","summary":"","title":"Podman","type":"tags"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"In our series exploring how to set up a streamlined and organized way to start your Python development journey using the DevContainer VSCode extension and Docker (or WSL/Podman), we\u0026rsquo;ve already seen how simple it is to define our development environment using just the DevContainer extension. Now, we\u0026rsquo;re ready to move on to the next part of the series: Optimize Python Development with VSCode and Docker.\nRunning Our Environment for the First Time # In this post, we will run our development environment for the first time and start working with Python using an amazing package and project manager, uv.\nAfter generating the definition for our environment, we now have a devcontainer.json file structure. Let‚Äôs dig in to explore what we have in this setup:\nBreaking Down the devcontainer.json Structure # Image Section:\nThis section specifies the container image reference, which is hosted on the Microsoft Container Registry.\nNote: You can also use a local image if you prefer. use DockerFile or Docker compose file.\nFeatures Section:\nThink of this section as a way to enhance the environment with additional tools and packages. In our case, we‚Äôre using uv (with shellautocompletion option enbaled).\ncustomization Section: The customization section is used to fine-tune the container development environment. It allows us to install additional extensions that will only be loaded inside the container, apply specific settings related to VSCode preferences, and execute additional commands.\nFor more information on available features, visit the Dev Containers Features Documentation. # If you\u0026rsquo;re working with a rootless container, you can find relevant information. here.\nLaunching Our Environment for the First Time üöÄ # Now it\u0026rsquo;s time to launch our environment for the first time! To do this, simply click on the Dev Container icon and choose Reopen in Container.\nIn the background:\nAn image will be added to your Docker images list. A container should be running. A volume will be created. VSCode will reload, but this time, it will run under the container. Time to Verify # The Remote Indicator in the status bar will display additional information, such as the name of the container we\u0026rsquo;re currently in and the distribution of the image being used.\nVerifying Python Version and Testing uv # Let‚Äôs perform a couple more checks by verifying the Python version being used and testing if uv is running correctly.\nEverything seems good so far! The next step is to create our first project and run it. That‚Äôs exactly what we‚Äôll cover in the next post.\nStay tuned!\n","date":"8 January 2025","externalUrl":null,"permalink":"/posts/2025-01-08-streamline-python-development-in-devcontainer-with-uv/","section":"Posts","summary":"","title":"Streamline Python Development in DevContainer with UV","type":"posts"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/tags/vscode/","section":"Tags","summary":"","title":"VSCode","type":"tags"},{"content":"","date":"8 January 2025","externalUrl":null,"permalink":"/tags/wsl/","section":"Tags","summary":"","title":"WSL","type":"tags"},{"content":"In today\u0026rsquo;s world, Python is used for many purposes in large projects, especially in AI, LLM, and RAG. However, maintaining a healthy environment, managing compatibility, and handling packaging can be challenging tasks.\nFor this reason, using containers not only for deploying Python apps but also as a development environment could be a suitable approach.\nIn this post, we will show how simple it is to start developing Python projects without needing to install Python, manage multiple versions, create virtual environments, set environment variables, and handle other prerequisites.\nWe can achieve this directly from VSCode using just one extension.\nPresenting the Extension # We‚Äôve probably all seen the .devcontainer folder and the devcontainer.json file in other projects. But what do they do?\nThe .devcontainer folder and its JSON file are used to define a containerized development environment. This setup ensures that all developers on a project have a consistent development environment, regardless of their local machine configurations. The .devcontainer configuration can specify the base image, extensions, and settings needed for the project.\nWe‚Äôre going to make this easy by generating the configuration files automatically‚Äîno need to craft them manually from scratch! üòâ\nSo let\u0026rsquo;s get started\u0026hellip;\nPrerequisites # Before we dive in, make sure we have Docker and VSCode installed.\nStep 1: Installing the Extension # First, let‚Äôs install the necessary extension in VSCode. We can do this by visiting the Dev Container extension page or by searching for it directly in the extension manager in Visual Studio Code. Use the Ctrl+Shift+X shortcut to open the extension manager.\nStep 2: Generate the DevContainer Folder # After installing the extension, we should find an icon at the bottom left side of our IDE. Click on it and follow the wizard steps to generate the .devcontainer folder and configuration files.\nSelect Add Dev Container Configuration Files.\nThen select Add Configuration to Workspace. This will add the .devcontainer folder and related configuration to our current project directory.\nWe can choose from a variety of preset configurations. In our case, we will select Python 3.\nWe‚Äôll be prompted to choose the Python version for your container. Pick any version you‚Äôre comfortable with (we‚Äôll go with Python 3.12 bullseye).\nIn the following step, we can choose additional features. We‚Äôll select uv, a great package and project manager that we‚Äôll use further in this post.\nWe can also select additional configurations for the features, so let‚Äôs enable the shell autocompletion option.\nWe can skip the next step if we don\u0026rsquo;t want to use the Dependabot functionality. Dependabot helps us keep our dependencies up to date by automatically checking for updates and creating pull requests. After running the wizard, we‚Äôll end up with the following root project structure.\nüéâ Once the .devcontainer folder is set up, there‚Äôs no need to build an image manually‚Äîthe extension will handle that for us! We‚Äôre now ready to connect to the containerized environment and start using it as our development environment. We‚Äôll explore this process in Part 2 of this post, so stay tuned!\nHappy coding, and see you in the next part!\n","date":"5 January 2025","externalUrl":null,"permalink":"/posts/2025-01-05-optimize-python-development-with-docker/","section":"Posts","summary":"","title":"Optimize Python Development with VSCode and Docker","type":"posts"},{"content":"","date":"5 January 2025","externalUrl":null,"permalink":"/tags/aboutme/","section":"Tags","summary":"","title":"Aboutme","type":"tags"},{"content":"","date":"5 January 2025","externalUrl":null,"permalink":"/tags/agentifyanchor/","section":"Tags","summary":"","title":"Agentifyanchor","type":"tags"},{"content":"Hello! üëã\nI\u0026rsquo;m a Microsoft Specialist üíª with a deep passion for AI ü§ñ. Over the years, I\u0026rsquo;ve become fascinated by optimizing development environments, especially in the world of Python üêç, Docker üêã, and VSCode üñ•Ô∏è. I‚Äôm always looking for ways to simplify complex tasks and make development smoother, which is why I love using containers and powerful tools to create consistent and portable setups.\nMy journey is all about exploring new technologies, automating workflows, and applying AI in innovative ways. I‚Äôm excited to share my insights and experiences with you, and I hope to learn and grow together in this tech journey! üåü\nDon\u0026rsquo;t forget to follow me on Twitter. üê¶ ","date":"5 January 2025","externalUrl":null,"permalink":"/posts/discover-journey/","section":"Posts","summary":"","title":"Discover My Journey: About Me","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]